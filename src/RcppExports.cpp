// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// exponential_work_likeli
double exponential_work_likeli(double const& theta, arma::vec const& theta_MLE, arma::vec const& J_ni, int const& k);
RcppExport SEXP _IMdac_exponential_work_likeli(SEXP thetaSEXP, SEXP theta_MLESEXP, SEXP J_niSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double const& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type theta_MLE(theta_MLESEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type J_ni(J_niSEXP);
    Rcpp::traits::input_parameter< int const& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(exponential_work_likeli(theta, theta_MLE, J_ni, k));
    return rcpp_result_gen;
END_RCPP
}
// exponential_pl_mid_P
arma::vec exponential_pl_mid_P(arma::vec const& theta, arma::vec const& theta_dag, arma::vec const& theta_MLE, int const& k, arma::vec const& J_ni, arma::vec const& n_i, int const& M);
RcppExport SEXP _IMdac_exponential_pl_mid_P(SEXP thetaSEXP, SEXP theta_dagSEXP, SEXP theta_MLESEXP, SEXP kSEXP, SEXP J_niSEXP, SEXP n_iSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type theta_dag(theta_dagSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type theta_MLE(theta_MLESEXP);
    Rcpp::traits::input_parameter< int const& >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type J_ni(J_niSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< int const& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(exponential_pl_mid_P(theta, theta_dag, theta_MLE, k, J_ni, n_i, M));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IMdac_exponential_work_likeli", (DL_FUNC) &_IMdac_exponential_work_likeli, 4},
    {"_IMdac_exponential_pl_mid_P", (DL_FUNC) &_IMdac_exponential_pl_mid_P, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_IMdac(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
